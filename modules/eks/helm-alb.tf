###############################################
# DATA SOURCES (EKS CONNECTION DETAILS)
# This file is needed to connect to the EKS cluster for deploying the ALB controller via Helm
# What is an ALB controller? It manages AWS Application Load Balancers for Kubernetes services.
# It does not create ALBs by itself, but it helps Kubernetes services to create and manage them.
# It’s a control-plane component that listens for Kubernetes objects like Ingress or Service type=LoadBalancer and then creates real AWS ALBs/NLBs in your account.
# It will automatically create 2 controller pods, one in each node for high availability and fault tolerance.
###############################################

# Get cluster info
# First we need to get the EKS cluster details using data source. 
# Then, we will use this info to connect to the cluster.
data "aws_eks_cluster" "alb" {
  name = aws_eks_cluster.this.name
}

# Get temporary auth token for cluster
# This is needed to authenticate to the EKS cluster
data "aws_eks_cluster_auth" "alb" {
  name = aws_eks_cluster.this.name
}

###############################################
# HEALTH-CHECK DELAY — Wait until EKS is active
###############################################
resource "null_resource" "wait_for_eks" {
  provisioner "local-exec" {
    command = "aws eks wait cluster-active --name ${var.cluster_name} --region ${var.region}"
  }

  depends_on = [aws_eks_cluster.this]
}


###############################################
# PROVIDERS FOR KUBERNETES AND HELM
# This block configures the Kubernetes and Helm providers to connect to the EKS cluster
# The provider block is necessary to interact with the Kubernetes API and deploy Helm charts
# At first we need to connect to the EKS cluster using the Kubernetes provider
# Then we use the Helm provider to deploy the AWS Load Balancer Controller via Helm
###############################################

provider "kubernetes" {
  # Here host is the endpoint of the EKS cluster. We call it because we need to connect to the cluster.
  host = data.aws_eks_cluster.alb.endpoint
  # This is the certificate authority data for the cluster, which is needed for secure communication.
  # What it does? It ensures that the connection to the cluster is secure and trusted.
  cluster_ca_certificate = base64decode(data.aws_eks_cluster.alb.certificate_authority[0].data)
  # This token is used for authentication to the EKS cluster.
  # It is a temporary token generated by AWS IAM for secure access.
  token = data.aws_eks_cluster_auth.alb.token
}

# This block is for the Helm provider to deploy Helm charts to the EKS cluster
provider "helm" {
  # Here, it uses kubernetes provider to connect to the EKS cluster
  kubernetes {
    host                   = data.aws_eks_cluster.alb.endpoint
    cluster_ca_certificate = base64decode(data.aws_eks_cluster.alb.certificate_authority[0].data)
    token                  = data.aws_eks_cluster_auth.alb.token
  }
}

###############################################
# SERVICE ACCOUNT FOR ALB CONTROLLER (IRSA)
###############################################
resource "kubernetes_service_account" "alb_sa" {
  metadata {
    name      = "aws-load-balancer-controller"
    namespace = "kube-system"

    // This step links the service account to the IAM role created earlier for the ALB controller
    annotations = {
      "eks.amazonaws.com/role-arn" = aws_iam_role.alb_controller_role.arn
    }
  }

  depends_on = [
    aws_iam_role.alb_controller_role,
    aws_iam_openid_connect_provider.this
  ]
}


###############################################
# HELM RELEASE FOR AWS LOAD BALANCER CONTROLLER
# This block is for deploying the AWS Load Balancer Controller via Helm
# Helm Release here means we are installing a Helm chart into our EKS cluster
###############################################

resource "helm_release" "alb_controller" {
  name       = "aws-load-balancer-controller"
  repository = "https://aws.github.io/eks-charts"
  chart      = "aws-load-balancer-controller"
  namespace  = "kube-system"

  # wait up to 5 minutes for Helm to finish
  timeout = 300
  # If true, Helm will wait until all resources are in a ready state before marking the release as successful
  wait = true
  # force update if already installed. Update what? All resources managed by this release
  force_update = true
  # If true, Helm will delete the release on failure
  cleanup_on_fail = true

  # set is used to pass values to the Helm chart
  set {
    name  = "clusterName"
    value = var.cluster_name
  }

  set {
    name  = "serviceAccount.create"
    value = false
  }

  set {
    name  = "serviceAccount.name"
    value = kubernetes_service_account.alb_sa.metadata[0].name
  }

  set {
    name  = "region"
    value = var.region
  }

  set {
    name  = "vpcId"
    value = var.vpc_id
  }

  depends_on = [
    null_resource.wait_for_eks,
    aws_eks_node_group.this,
    aws_iam_openid_connect_provider.this,
    kubernetes_service_account.alb_sa,
    aws_iam_role.alb_controller_role
  ]
}

